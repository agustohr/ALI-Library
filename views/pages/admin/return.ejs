<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('partials_admin/head'); %>
    <title>ALI Library - Borrow</title>
</head>

<body id="page-top">

    <!-- Page Wrapper -->
    <div id="wrapper">

        <%- include('partials_admin/sidebar'); %>

        <!-- Content Wrapper -->
        <div id="content-wrapper" class="d-flex flex-column">

            <!-- Main Content -->
            <div id="content">

              <%- include('partials_admin/topbar'); %>

                <!-- Begin Page Content -->
                <div class="container-fluid">

                    <!-- Page Heading -->
                    <h1 class="h3 mb-2 text-gray-800">Return Item</h1>
                    <p class="mb-4">Silakan untuk melakukan set return atau cancel pada data borrowed yang tersedia </p>

                    <!-- DataTales Example -->
                    <div class="card shadow mb-4">
                        <div class="card-header py-3">
                            <h6 class="m-0 font-weight-bold text-primary">Data Borrowed</h6>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-striped" id="dataTable" width="100%" cellspacing="0">
                                    <thead>
                                        <tr>
                                            <th>ID Borrow</th>
                                            <th>ID Pegawai</th>
                                            <th>Nama</th>
                                            <th>ID Item</th>
                                            <th>Title</th>
                                            <th>Code</th>
                                            <th>Borrow Date</th>
                                            <!-- <th>Return Admin</th>
                                            <th>Return Date</th>
                                            <th>Cancel Admin</th>
                                            <th>Cancel Date</th> -->
                                            <th>Due Date</th>
                                            <th>Borrow Status</th>
                                            <th>Return Status</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tfoot>
                                        <tr>
                                          <th>ID Borrow</th>
                                          <th>ID Pegawai</th>
                                          <th>Nama</th>
                                          <th>ID Item</th>
                                          <th>Title</th>
                                          <th>Code</th>
                                          <th>Borrow Date</th>
                                          <!-- <th>Return Admin</th>
                                          <th>Return Date</th>
                                          <th>Cancel Admin</th>
                                          <th>Cancel Date</th> -->
                                          <th>Due Date</th>
                                          <th>Borrow Status</th>
                                          <th>Return Status</th>
                                          <th>Action</th>
                                        </tr>
                                    </tfoot>
                                    <tbody>
                                      <% borrows.forEach((i,index)=> { %>
                                        <% if (i.borrow_status == "borrowed") { %>
                                          <tr>
                                            <td><%= i.id_borrow%></td>
                                            <% user.forEach(j => { %>
                                             <% if (j.id_pegawai == i.user_id) { %>
                                              <td><a href data-bs-toggle="modal" data-bs-target="#showUser" data-bs-id="<%= j.id_pegawai %>" data-bs-nama="<%= j.nama %>" data-bs-jabatan="<%= j.jabatan %>" data-bs-noHp="<%= j.no_hp %>" data-bs-email="<%= j.email %>" data-bs-statusUsers="<%= j.status_users %>"><%= i.user_id%></a></td>
                                              <td><%= j.nama %></td>
                                             <% } %>
                                            <% }) %>
                                            
                                            <% item.forEach(j => { %>
                                              <% if (j.id_item == i.item_id) { %>
                                               <td><a href data-bs-toggle="modal" data-bs-target="#showItem" data-bs-id="<%= j.id_item %>" data-bs-category="<%= j.category %>" data-bs-title="<%= j.title %>" data-bs-quantity="<%= j.quantity %>" ><%= i.item_id%></a></td>
                                               <td><%= j.title %></td>
                                              <% } %>
                                            <% }) %>
              
                                            <td><%= i.code%></td>
                                            <td><%= i.borrow_date %></td>
                                            
                                            
                                            <% if (i.extend_due_date != null) { %>
                                              <td><%= i.extend_due_date%></td>
                                            <% }else{ %>
                                              <% if (i.due_date != null) { %>
                                                <td><%= i.due_date%></td>
                                              <% } else{%>
                                                <td><%= null %> </td>
                                                <% } %> 
                                              <%} %>
                                            
                                            <td><span class="badge text-bg-primary"><%= i.borrow_status%></span></td>
                                            <% if (i.return_status == "waiting") { %>
                                              <td><span class="badge text-bg-warning"><%= i.return_status%></span></td>
                                            <% } else if(i.return_status == "overdue"){%>
                                              <td><span class="badge text-bg-danger"><%= i.return_status%></span></td>
                                            <% } else{%> 
                                              <td><%= null %></td>
                                            <% } %> 
                                            <!-- <td><span class="badge text-bg-warning">waiting</span></td> -->
                                            <td>
                                              <div class="btn-group btn-group-sm" role="group" aria-label="Basic mixed styles example">
                                                <% item.forEach(j => { %>
                                                  <% if (j.id_item == i.item_id) { %>
                                                  <% user.forEach(k => { %>
                                                    <% if (k.id_pegawai == i.user_id) { %>
                                                      <button id="liveData" type="button" class="btn btn-success" onclick='switchCompleted(<%= i.id %>, "<%= i.extend_due_date %>", "<%= i.due_date %>", "<%= users.id_pegawai %>", <%= j.available_quantity %>, "<%= j.id %>", <%= k.ration %>, <%= k.id %>, "<%= k.id_pegawai %>")'>Return</button>
                                                      
                                                    <% } %>
                                                    <% }) %>
                                                  <% } %>
                                                <% }) %>
                                                
                                                <button type="button" class="btn btn-danger" onclick='switchCanceled(<%= i.id %>, "<%= users.id_pegawai %>" )'>Cancel</button>
                                              </div>
                                            </td>
                                          </tr>
                                        <% } %>
                                        
                                      <% }) %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                </div>
                <!-- /.container-fluid -->

            </div>
            <!-- End of Main Content -->

            <%- include('partials_admin/footer'); %>

        </div>
        <!-- End of Content Wrapper -->

    </div>
    <!-- End of Page Wrapper -->

    <!-- Scroll to Top Button-->
    <a class="scroll-to-top rounded" href="#page-top">
        <i class="fas fa-angle-up"></i>
    </a>

    <%- include('partials_admin/logout'); %>

    <!-- =====================================Modal Show User================================ -->
    <div class="modal fade" id="showUser" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="exampleModalLabel">Data User</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="detailBorrow">
                <div class="mb-3">
                  <label for="recipient-id" class="col-form-label">ID Pegawai:</label>
                  <input type="text" readonly class="form-control" id="recipient-id">
                </div>
                <div class="mb-3">
                  <label for="recipient1-nama" class="col-form-label">Nama:</label>
                  <input type="text" readonly class="form-control" id="recipient1-nama">
                </div>
                <div class="mb-3">
                  <label for="recipient2-jabatan" class="col-form-label">Jabatan:</label>
                  <input type="text" readonly class="form-control" id="recipient2-jabatan">
                </div>
                <div class="mb-3">
                  <label for="recipient3-noHp" class="col-form-label">No HP:</label>
                  <input type="text" readonly class="form-control" id="recipient3-noHp">
                  <!-- <input type="text" readonly class="form-control" id="recipient2-title"> -->
                </div>
                <div class="mb-3">
                  <label for="recipient4-email" class="col-form-label">Email:</label>
                  <input type="text" readonly class="form-control" id="recipient4-email">
                </div>
                <div class="mb-3">
                  <label for="recipient5-statusUsers" class="col-form-label">Status User:</label>
                  <input type="text" readonly class="form-control" id="recipient5-statusUsers">
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
  
      <!-- =====================================Modal Show Item====================================== -->
      <div class="modal fade" id="showItem" tabindex="-1" aria-labelledby="itemLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="itemLabel">Data Item</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="detailBorrow">
                <div class="mb-3">
                  <label for="recipient-id" class="col-form-label">ID Item:</label>
                  <input type="text" readonly class="form-control" id="recipient-id">
                </div>
                <div class="mb-3">
                  <label for="recipient1-category" class="col-form-label">Category:</label>
                  <input type="text" readonly class="form-control" id="recipient1-category">
                </div>
                <div class="mb-3">
                  <label for="recipient2-title" class="col-form-label">Title:</label>
                  <input type="text" readonly class="form-control" id="recipient2-title">
                </div>
                <div class="mb-3">
                  <label for="recipient3-quantity" class="col-form-label">Quantity:</label>
                  <input type="text" readonly class="form-control" id="recipient3-quantity">
                </div>
                
              </form>
            </div>
          </div>
        </div>
      </div>

    <%- include('partials_admin/script'); %>
    <!-- script -->
    <script type="text/javascript">
        // const socket = io("http://localhost:8001/");

        $(document).ready(function () {
            $('#dataTable').DataTable();
            // loadDueDate();
        });
        
        // async function loadDueDate() {
        //   const emailUser = document.getElementById('emailReceiver').value;
        //   const duedate = document.getElementById('duedateReceiver').value;
        //   const title = document.getElementById('itemReceiver').value;
        //   console.log(title);
        //   // socket.emit("newUser", id_pegawai);
        //   socket.emit("duedateNotification", {
        //       // senderId: id_pegawai,
        //       email: emailUser,
        //       title: title,
        //       duedate: duedate,
        //       // text: "Due Date"
        //   });
        // }

        async function switchBooking(id, idA, aq, idI, email, receiverId, name, id_item, title){
          event.preventDefault();
          let tgl = new Date();
          let borrow_status = "booking";
          $.ajax({
              url: `http://localhost:8001/api/update_borrow/${id}`,
              type: 'PUT',
              data: ({ booking_admin_id: idA, booking_date: tgl, borrow_status: borrow_status }),
              success: function (result) {
                location.reload();
              }
          });

          let availableQuantity = aq - 1;
          let index = idI;
  
          $.ajax({
              url: `http://localhost:8001/api/update_item/${index}`,
              type: 'PUT',
              data: ({ available_quantity: availableQuantity }),
              success: function (result) {
                location.reload();
              }
          });

          $.ajax({
            url: `http://localhost:8001/api/add_alert`,
            type: 'POST',
            data: ({ receiverName: name, senderId: idA, senderName: "Admin", id_item: id_item, title: title, text: "Request Booking Approved" }),
            success: function (result) {
              
              location.reload();
            }
          });

          socket.emit("newUser", idA);
          socket.emit("approveBooking", {
              // senderId: id_pegawai, 
              receiverId: receiverId,
              name: name,
              id_item: id_item,
              title: title,
              email: email,
              text: "Request Booking Approved",
              subtext: "Your booking request has been approved by the admin APRIL Library. Your current book borrowing status is booking. Please come to the library to pick up a book."
          });
        }
  
        async function switchBorrowed(id, idA){
          event.preventDefault();
          let tgl = new Date();
          let borrow_status = "borrowed";
          let dueDate = new Date(tgl);
          dueDate.setDate(dueDate.getDate()+14);
          $.ajax({
              url: `http://localhost:8001/api/update_borrow/${id}`,
              type: 'PUT',
              data: ({ borrow_admin_id: idA, borrow_date: tgl, due_date: dueDate, borrow_status: borrow_status }),
              success: function (result) {
                location.reload();
              }
          });
        }
  
        async function switchCompleted(id, extendDate, dueDate, idA, aq, idI, r, idU, receiverId){
          // let ind= id;
          let dateNow = new Date();
          let borrow_status = "completed";
          
          $.ajax({
              url: `http://localhost:8001/api/update_borrow/${id}`,
              type: 'PUT',
              data: ({ return_admin_id: idA, return_date: dateNow, borrow_status: borrow_status, return_status: "ontime" }),
              success: function (result) {
                location.reload();
              }
          });
  
          let availableQuantity = aq + 1;
  
          $.ajax({
              url: `http://localhost:8001/api/update_item/${idI}`,
              type: 'PUT',
              data: ({ available_quantity: availableQuantity }),
              success: function (result) {
                // console.log(result)
                // location.reload();
              }
          });

          let ration = r+1;
          console.log(ration);
          $.ajax({
            url: `http://localhost:8001/api/update_profile/${idU}`,
            type: 'PUT',
            data: ({ ration: ration }),
            success: function (result) {
              // location.reload();
            }
          });

          let compareDate;
          console.log(extendDate)
          console.log(dueDate)
          if (extendDate != "") {
            console.log("masuk1")
            compareDate = new Date(extendDate);
            // tgl = new Date(borrow.extend_due_date).getDate();
            // bln = new Date(borrow.extend_due_date).getMonth()+1;
            // thn = new Date(borrow.extend_due_date).getFullYear();
          }else{
            console.log("masuk")
            compareDate = new Date(dueDate);
            // tgl = new Date(borrow.due_date).getDate();
            // bln = new Date(borrow.due_date).getMonth()+1;
            // thn = new Date(borrow.due_date).getFullYear();
          }
          console.log(compareDate)
          console.log(dateNow)
          console.log("======================")

          dateNow.setHours(0);
          dateNow.setMinutes(0);
          dateNow.setSeconds(0);

          compareDate.setHours(0);
          compareDate.setMinutes(0);
          compareDate.setSeconds(0);

          console.log(dateNow)
          console.log(compareDate)

          // let tanggal = new Date("07/27/2022")
          // console.log(tanggal)

          // var Difference = dateNow.getDate() - tanggal.getDate();
          // console.log(Difference)

          // if (dateNow < tanggal) {
          //   console.log("success")
          // }

          // // hitung perbedaan waktu dari dua tanggal
	        // var Difference_In_Time = dateNow.getDate() - compareDate.getDate();
          // console.log(Difference_In_Time)
          // // hitung jml hari antara dua tanggal
	        // var Difference_In_Days = Difference / (1000 * 3600 * 24);
          // console.log(Difference_In_Days)
          if (dateNow > compareDate) {
            $.ajax({
              url: `http://localhost:8001/api/update_borrow/${id}`,
              type: 'PUT',
              data: ({ return_status: "overdue" }),
              success: function (result) {
                location.reload();
              }
            });

            $.ajax({
              url: `http://localhost:8001/api/update_profile/${idU}`,
              type: 'PUT',
              data: ({ status_users: "notactive" }),
              success: function (result) {
                // location.reload();
              }
            });
            console.log("status notactive")
            let blnDepan = new Date(dateNow) 
            blnDepan.setDate(blnDepan.getDate()+30);
            console.log(blnDepan)
            
            // socket.emit("newUser", idA);
            socket.emit("statusAccount", {
                // id: idU,
                activeDate: blnDepan,
                // senderId: id_pegawai, 
                receiverId: receiverId,
                // name: name,
                // id_item: id_item,
                // title: title,
                // email: email,
                // text: "Request Booking Approved",
                // subtext: "Your booking request has been approved by the admin APRIL Library. Your current book borrowing status is booking. Please come to the library to pick up a book."
            });
          }
        }
  
        async function switchCanceled(id, idA){
          let tgl = new Date();
          let borrow_status = "canceled";
          $.ajax({
              url: `http://localhost:8001/api/update_borrow/${id}`,
              type: 'PUT',
              data: ({ cancel_admin_id: idA, cancel_date: tgl, borrow_status: borrow_status }),
              success: function (result) {
                location.reload();
              }
          });
        }

        async function switchRejected(id, idA, email, receiverId, name, id_item, title){
          let tgl = new Date();
          let borrow_status = "rejected";
          $.ajax({
              url: `http://localhost:8001/api/update_borrow/${id}`,
              type: 'PUT',
              data: ({ cancel_admin_id: idA, cancel_date: tgl, borrow_status: borrow_status }),
              success: function (result) {
                // location.reload();
              }
          });

          $.ajax({
            url: `http://localhost:8001/api/add_alert`,
            type: 'POST',
            data: ({ receiverName: name, senderId: idA, senderName: "Admin", id_item: id_item, title: title, text: "Request Booking Rejected" }),
            success: function (result) {
              
              location.reload();
            }
          });

          socket.emit("newUser", idA);
          socket.emit("approveBooking", {
              // senderId: id_pegawai, 
              receiverId: receiverId,
              name: name,
              id_item: id_item,
              title: title,
              email: email,
              text: "Request Booking Rejected",
              subtext: "Sorry your booking request was not approved."
          });
        }
  
        //=====================Modal User========================
        const exampleModal = document.getElementById('showUser')
        exampleModal.addEventListener('show.bs.modal', event => {
          // Button that triggered the modal
          const button = event.relatedTarget
          // Extract info from data-bs-* attributes
          const recipient = button.getAttribute('data-bs-id')
          const recipient1 = button.getAttribute('data-bs-nama')
          const recipient2 = button.getAttribute('data-bs-jabatan')
          const recipient3 = button.getAttribute('data-bs-noHp')
          const recipient4 = button.getAttribute('data-bs-email')
          const recipient5 = button.getAttribute('data-bs-statusUsers')
          
          // If necessary, you could initiate an AJAX request here
          // and then do the updating in a callback.
          //
          // Update the modal's content.
          const modalTitle = exampleModal.querySelector('.modal-title')
          const modalBodyInput = exampleModal.querySelector('#recipient-id')
          const modalBodyInput1 = exampleModal.querySelector('#recipient1-nama')
          const modalBodyInput2 = exampleModal.querySelector('#recipient2-jabatan')
          const modalBodyInput3 = exampleModal.querySelector('#recipient3-noHp')
          const modalBodyInput4 = exampleModal.querySelector('#recipient4-email')
          const modalBodyInput5 = exampleModal.querySelector('#recipient5-statusUsers')
  
          modalTitle.textContent = `Data Peminjaman ${recipient}`
          modalBodyInput.value = recipient
          modalBodyInput1.value = recipient1
          modalBodyInput2.value = recipient2
          modalBodyInput3.value = recipient3
          modalBodyInput4.value = recipient4
          modalBodyInput5.value = recipient5
          
        })
  
        //=====================Modal Item========================
        const itemModal = document.getElementById('showItem')
        itemModal.addEventListener('show.bs.modal', event => {
          // Button that triggered the modal
          const button = event.relatedTarget
          // Extract info from data-bs-* attributes
          const recipient = button.getAttribute('data-bs-id')
          const recipient1 = button.getAttribute('data-bs-category')
          const recipient2 = button.getAttribute('data-bs-title')
          const recipient3 = button.getAttribute('data-bs-quantity')
          
          // If necessary, you could initiate an AJAX request here
          // and then do the updating in a callback.
          //
          // Update the modal's content.
          const modalTitle = itemModal.querySelector('.modal-title')
          const modalBodyInput = itemModal.querySelector('#recipient-id')
          const modalBodyInput1 = itemModal.querySelector('#recipient1-category')
          const modalBodyInput2 = itemModal.querySelector('#recipient2-title')
          const modalBodyInput3 = itemModal.querySelector('#recipient3-quantity')
  
          modalTitle.textContent = `Data Peminjaman ${recipient}`
          modalBodyInput.value = recipient
          modalBodyInput1.value = recipient1
          modalBodyInput2.value = recipient2
          modalBodyInput3.value = recipient3
          
        })
  
        // $(function(){
      
        //     // optional: don't cache ajax to force the content to be fresh
        //     $.ajaxSetup ({
        //         cache: false
        //     });
            
  
            
        //     // specify the server/url you want to load data from
        //     var url = "http://localhost:8001/admin/borrow_admin";
            
        //     // on click, load the data dynamically into the #result div
        //     // load(url);
        //     // window.setTimeout(update, 1000);
  
        //     $("#liveData").click(function(){
        //         $("#result").load(url);
        //     });
  
        // });
  
        
  
      </script>
</body>

</html>